library(dplyr)
library(tidyverse)
library(ggplot2)
library(reshape2)
## import the csv file as tibble object
econData <- as_tibble(read.csv("China_EO_49to17.csv"))
##only interested in the enterprise data in those direct controlled cities after year 2000
DirectCity<- econData %>%
select(Beijing_Enterprise, Shanghai_Enterprise, Tianjin_Enterprise, Chongqing_Enterprise, Year)%>%
filter(Year >= 2000)
##rename the columns
names(DirectCity) <- c("Beijing", "Shanghai", "Tianjin", "Chongqing", "Year")
## melt the tibble object to a tall structure for plotting purpose
meltDirectCity <- melt(DirectCity, id.vars = "Year")
##plot. Different cities will have different color; applying smoothed linear regression lines with 95% confidence area
ggplot(meltDirectCity, aes(x = Year, y = value, colour = variable)) + geom_point() + scale_size_area()+ stat_smooth(method = lm, formula = y ~ splines::bs(x, 3))
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang", NULL, NULL, subsetName = NE_poplation)
Region_function <- function(prov1, prov2, prov3, prov4, prov5, subsetName){
subsetName <- subset(added, Region == prov1 | Region == prov2 | Region == prov3 | Region == prov4 |
Region == prov5 )
}
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang", NULL, NULL, subsetName = NE_poplation)
##external csv from Nation Bureau of Statistics of China, contains population estimates from 2000 - 2017, for all provinces in mainland China
data1 <- read.csv("China_EO_49to17.csv")
data1_output<- select(data1, matches("output"), Year)
data1_enterprise <-select(data1, matches("enterprise"), Year)
NE_Output_Sum <- data1_output %>%
select("Liaoning_Output", "Jilin_Output", "Heilongjiang_Output", Year) %>%
mutate(Northeast_Output =rowSums(.[1:3], na.rm = TRUE))
NE_Enterprise_Sum <- data1_enterprise %>%
select("Liaoning_Enterprise", "Jilin_Enterprise", "Heilongjiang_Enterprise", Year) %>%
mutate(Northeast_Enterprise =rowSums(.[1:3], na.rm = TRUE))
NC_Output_Sum <- data1_output %>%
select("Beijing_Output", "Tianjin_Output", "Hebei_Output", "Shandong_Output", Year) %>%
mutate(NorthcCostal_Output =rowSums(.[1:3], na.rm = TRUE))
NC_Enterprise_Sum <- data1_enterprise %>%
select("Beijing_Enterprise", "Tianjin_Enterprise", "Hebei_Enterprise", "Shandong_Enterprise", Year) %>%
mutate(NorthCoastal_Enterprise =rowSums(.[1:3], na.rm = TRUE))
EC_Output_Sum <- data1_output %>%
select("Shanghai_Output", "Jiangsu_Output", "Zhejiang_Output", Year) %>%
mutate(EastCostal_Output =rowSums(.[1:3], na.rm = TRUE))
EC_Enterprise_Sum <- data1_enterprise %>%
select("Shanghai_Enterprise", "Jiangsu_Enterprise", "Zhejiang_Enterprise", Year) %>%
mutate(EastCostal_Enterprise =rowSums(.[1:3], na.rm = TRUE))
SC_Output_Sum <- data1_output %>%
select("Fujian_Output", "Guangdong_Output", "Hainan_Output", Year) %>%
mutate(SouthCostal_Output =rowSums(.[1:3], na.rm = TRUE))
SC_Enterprise_Sum <- data1_enterprise %>%
select("Fujian_Enterprise", "Guangdong_Enterprise", "Hainan_Enterprise", Year) %>%
mutate(SouthCostal_Enterprise =rowSums(.[1:3], na.rm = TRUE))
YellowRiver_Output_Sum<-data1_output %>%
select("Shanxi_Output", "InnerMongolia_Output", "Henan_Output", "Shaanxi_Output", Year) %>%
mutate(YellowRiver_Output =rowSums(.[1:4], na.rm = TRUE))
YellowRiver_Enterprise_Sum <- data1_enterprise %>%
select("Shanxi_Enterprise", "InnerMongolia_Enterprise", "Henan_Enterprise", "Shaanxi_Enterprise", Year) %>%
mutate(YellowRiver_Enterprise =rowSums(.[1:3], na.rm = TRUE))
Yangtz_Output_Sum <- data1_output %>%
select("Anhui_Output", "Jiangxi_Output", "Hubei_Output", "Hunan_Output",Year) %>%
mutate(Yangtz_Output =rowSums(.[1:4], na.rm = TRUE))
Yangtz_Enterprise_Sum <-  data1_enterprise %>%
select("Anhui_Enterprise", "Jiangxi_Enterprise", "Hubei_Enterprise", "Hunan_Enterprises", Year) %>%
mutate(Yangtz_Enterprise =rowSums(.[1:4], na.rm = TRUE))
SW_Output_Sum <- data1_output %>%
select("Guangxi_Output", "Chongqing_Output", "Sichuan_Output", "Guizhou_Output", "Yunnan_Output", Year) %>%
mutate(Southwest_Output =rowSums(.[1:5], na.rm = TRUE))
SW_Enterprise_Sum <- data1_enterprise %>%
select("Guangxi_Enterprise", "Chongqing_Enterprise", "Sichuan_Enterprise", "Guizhou_Enterprise", "Yunnan_Enterprise", Year) %>%
mutate(Southwest_Enterprise =rowSums(.[1:5], na.rm = TRUE))
NW_Output_Sum <- data1_output %>%
select("Tibet_Output", "Gansu_Output", "Qinghai_Output", "Ningxia_Output", "Xinjiang_Output", Year) %>%
mutate(Northwest_Output =rowSums(.[1:5], na.rm = TRUE))
NW_Enterprise_Sum <- data1_enterprise %>%
select("Tibet_Enterprise", "Gansu_Enterprise", "Qinghai_Enterprise", "Ningxia_Enterprise", "Xinjiang_Enterprise", Year) %>%
mutate(Northwest_Enterprise =rowSums(.[1:5], na.rm = TRUE))
Output_Region <- data.frame(EC_Output_Sum, NC_Output_Sum, NE_Output_Sum, NW_Output_Sum, SC_Output_Sum, SW_Output_Sum, Yangtz_Output_Sum, YellowRiver_Output_Sum)
Output_Region <- Output_Region %>%
select(-matches("Year."))
Enterprise_Region <- data.frame(EC_Enterprise_Sum, NC_Enterprise_Sum, NE_Enterprise_Sum, NW_Enterprise_Sum, SC_Enterprise_Sum, SW_Enterprise_Sum, Yangtz_Enterprise_Sum, YellowRiver_Enterprise_Sum)
Enterprise_Region <- Enterprise_Region %>%
select(-matches("Year."))
##############This is for the added data
added <- read.csv("AnnualbyProvince.csv")
NE_popSum<- NE_pop %>%
summarize_at(vars(starts_with("x")), funs(sum(., na.rm = TRUE))) %>%
mutate(Region = "Northeast")
Region_function <- function(prov1, prov2, prov3, prov4, prov5, subsetName){
subsetName <- subset(added, Region == prov1 | Region == prov2 | Region == prov3 | Region == prov4 |
Region == prov5 )
}
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang", NULL, NULL, subsetName = NE_poplation)
NC_pop <- Region_function("Beijing", "Tianjin", "Hebei", "Shandong", NULL, NULL, NC_poplation)
EC_pop <- Region_function("Shanghai", "Jiangsu", "Zhejiang", NULL, NULL, EC_population)
Yangtz_pop <- Region_function("Anhui", "Jiangxi", "Hubei", "Hunan", NULL, Yangtz_population)
SW_pop <- Region_function("Guangxi", "Chongqing", "Sichuan", "Guizhou", "Yunnan", SW_population)
NW_pop <- Region_function("")
NC_pop <- Region_function("Beijing", "Tianjin", "Hebei", "Shandong", NULL, NC_poplation)
View(NC_pop)
NC_pop <- Region_function("Beijing", "Tianjin", "Hebei", "Shandong", NULL, NC_poplation)
NC_population
NC_pop
NE_pop
Region_function <- function(prov1, prov2, prov3, subsetName){
subset(added, Region == prov1 | Region == prov2 | Region == prov3)
}
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang"subsetName = NE_poplation)
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang",subsetName = NE_poplation)
View(NC_pop)
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang",subsetName = NE_poplation)
View(NE_pop)
Region_function <- function(prov1, prov2, prov3, prov4, prov5){
subset(added, Region == prov1 | Region == prov2 | Region == prov3)
}
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang", NULL, NULL, subsetName = NE_poplation)
subset(added, Region == prov1 | Region == prov2 | Region == prov3 | Region == prov4 | Region == prov5)
Region_function <- function(prov1, prov2, prov3, prov4, prov5){
subset(added, Region == prov1 | Region == prov2 | Region == prov3 | Region == prov4 | Region == prov5)
}
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang", NULL, NULL, subsetName = NE_poplation)
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang", NULL, NULL)
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang")
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang", NA, NA)
View(NE_pop)
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang", NA, NA)
NC_pop <- Region_function("Beijing", "Tianjin", "Hebei", "Shandong", NA, NC_poplation)
EC_pop <- Region_function("Shanghai", "Jiangsu", "Zhejiang", NA, NA)
SC_pop <- Region_function("Fujian", "Guangdong", "Hainan", NA, NA)
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang", NA, NA)
NC_pop <- Region_function("Beijing", "Tianjin", "Hebei", "Shandong", NA)
EC_pop <- Region_function("Shanghai", "Jiangsu", "Zhejiang", NA, NA)
SC_pop <- Region_function("Fujian", "Guangdong", "Hainan", NA, NA)
YellowRiver_pop <- Region_function("Shanxi", "InnerMongolia", "Henan", "Shaanxi", NA)
Yangtz_pop <- Region_function("Anhui", "Jiangxi", "Hubei", "Hunan", NA)
SW_pop <- Region_function("Guangxi", "Chongqing", "Sichuan", "Guizhou", "Yunnan")
NW_pop <- Region_function("Tibet", "Gansu", "Qinghai", "Ningxia", "Xinjiang")
Pop_sum_function <- function(dataset, region_name){
dataset %>%
summarize_at(vars(starts_with("x")), funs(sum(., na.rm = TRUE))) %>%
mutate(Region = region_name)
}
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang", NA, NA)
NE_pop_sum <- Pop_sum_function(NE_pop, "Northeast_pop")
View(NE_Output_Sum)
NC_pop_sum <- Pop_sum_function(NC_pop, "NorthCoastal")
EC_pop_sum <- Pop_sum_function(EC_pop, "EastCoastal")
SC_pop_sum <- Pop_sum_function(SC_pop, "SouthCoastal")
YellowRiver_pop_sum <- Pop_sum_function(YellowRiver_pop, "YellowRiverRegion")
Yangtz_pop_sum <- Pop_sum_function(Yangtz_pop, "YangtzRegion")
SW_pop_sum<-Region_function(SW_pop, "Southwest")
SW_pop_sum<-Pop_sum_function(SW_pop, "Southwest")
NW_pop_sum<-Pop_sum_function(NW_pop, "Northwest")
NE_pop <- Region_function("Liaoning", "Jilin", "Heilongjiang", NA, NA)
NE_pop_sum <- Pop_sum_function(NE_pop, "Northeast_pop")
NC_pop <- Region_function("Beijing", "Tianjin", "Hebei", "Shandong", NA)
NC_pop_sum <- Pop_sum_function(NC_pop, "NorthCoastal")
EC_pop <- Region_function("Shanghai", "Jiangsu", "Zhejiang", NA, NA)
EC_pop_sum <- Pop_sum_function(EC_pop, "EastCoastal")
SC_pop <- Region_function("Fujian", "Guangdong", "Hainan", NA, NA)
SC_pop_sum <- Pop_sum_function(SC_pop, "SouthCoastal")
YellowRiver_pop <- Region_function("Shanxi", "InnerMongolia", "Henan", "Shaanxi", NA)
YellowRiver_pop_sum <- Pop_sum_function(YellowRiver_pop, "YellowRiverRegion")
Yangtz_pop <- Region_function("Anhui", "Jiangxi", "Hubei", "Hunan", NA)
Yangtz_pop_sum <- Pop_sum_function(Yangtz_pop, "YangtzRegion")
SW_pop <- Region_function("Guangxi", "Chongqing", "Sichuan", "Guizhou", "Yunnan")
SW_pop_sum<-Pop_sum_function(SW_pop, "Southwest")
NW_pop <- Region_function("Tibet", "Gansu", "Qinghai", "Ningxia", "Xinjiang")
NW_pop_sum<-Pop_sum_function(NW_pop, "Northwest")
EC_pop_sum <- Pop_sum_function(EC_pop, "EastCoastal")
RegionalPop<- left_join(NE_pop_sum, NC_pop_sum, EC_pop_sum, SC_pop_sum, YellowRiver_pop_sum, Tangtz_pop_sum, SW_pop_sum, NW_pop_sum, by = Year )
RegionalPop<- data.frame(NE_pop_sum, NC_pop_sum, EC_pop_sum, SC_pop_sum, YellowRiver_pop_sum, Tangtz_pop_sum, SW_pop_sum, NW_pop_sum)
RegionalPop<- data.frame(NE_pop_sum, NC_pop_sum, EC_pop_sum, SC_pop_sum, YellowRiver_pop_sum, Yangtz_pop_sum, SW_pop_sum, NW_pop_sum)
View(RegionalPop)
Enterprise_Region <- data.frame(EC_Enterprise_Sum, NC_Enterprise_Sum, NE_Enterprise_Sum, NW_Enterprise_Sum, SC_Enterprise_Sum, SW_Enterprise_Sum, Yangtz_Enterprise_Sum, YellowRiver_Enterprise_Sum, na.rm = TRUE)
View(RegionalPop)
RegionalPop<- matrix(NE_pop_sum, NC_pop_sum, EC_pop_sum, SC_pop_sum, YellowRiver_pop_sum, Yangtz_pop_sum, SW_pop_sum, NW_pop_sum)
RegionalPop<- (NE_pop_sum, NC_pop_sum)
RegionalPop<- data.frame(NE_pop_sum, NC_pop_sum)
View(RegionalPop)
RegionalPop<- data.frame(NE_pop, NC_pop)
RegionalPop<- data.frame(NE_pop, NC_pop, EC_pop)
RegionalPop<- data.frame(NE_pop, NC_pop, EC_pop, na.rm = TRUE)
RegionalPop<- merge(NE_pop_sum, NC_pop_sum, SC_pop_sum, by = Year, all = TRUE)
RegionalPop<- merge(NE_pop_sum, NC_pop_sum, SC_pop_sum, by = 0, all = TRUE)
RegionalPop<- merge(NE_pop_sum, NC_pop_sum, SC_pop_sum, all = TRUE)
RegionalPop<- left_join(NE_pop_sum, NC_pop_sum, SC_pop_sum)
RegionalPop<- left_join(NE_pop_sum, NC_pop_sum, SC_pop_sum, by = Year)
View(EC_pop_sum)
RegionalPop<- left_join(NE_pop_sum, NC_pop_sum, SC_pop_sum, by = Region)
RegionalPop<- left_join(NE_pop_sum, NC_pop_sum, SC_pop_sum, by = "X2017")
View(RegionalPop)
RegionalPop<- rbind(NE_pop_sum, NC_pop_sum, EC_pop_sum, SC_pop_sum)
View(RegionalPop)
RegionalPop<- rbind(NE_pop_sum, NC_pop_sum, EC_pop_sum, SC_pop_sum, YellowRiver_pop_sum, Yangtz_pop_sum, SW_pop_sum, NW_pop_sum)
## user defined function. Summarize any regional population subset
Pop_sum_function <- function(dataset, region_name){
dataset %>%
summarize_at(vars(starts_with("x")), funs(sum(., na.rm = TRUE))) %>%
mutate(Region = region_name)
}
## join all rows
RegionalPop<- rbind(NE_pop_sum, NC_pop_sum, EC_pop_sum, SC_pop_sum, YellowRiver_pop_sum, Yangtz_pop_sum, SW_pop_sum, NW_pop_sum, na.rm = TRUE)
View(RegionalPop)
## join all rows
RegionalPop<- rbind(NE_pop_sum, NC_pop_sum, EC_pop_sum, SC_pop_sum, YellowRiver_pop_sum, Yangtz_pop_sum, SW_pop_sum, NW_pop_sum)
View(RegionalPop)
install.packages("tmap", "sf")
library(sf)
library(tmap)
installed.packages("runaturalearth", "rnaturalearthdata", "maps", "mapview", "ggmap")
install.packages("runaturalearth", "rnaturalearthdata", "maps", "mapview", "ggmap")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
install.packages("mapview", "ggmap", "maps")
install.packages("mapview", "ggmap", "maps")
install.packages("ggmap")
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(maps)
library(tmap)
library(mapview)
library(ggmap)
install.packages("leaflet")
install.packages("leaflet")
t = read.csv("wa_od_main_JT00_2015.csv")
t$w_geocode<-as.character(t$w_geocode)
t$h_geocode<-as.character(t$h_geocode)
t$w_geocode[which(length(t$w_geocode) == 14)]<-paste0("0",t$w_geocode[which(length(t$w_geocode) == 14)])
t$h_geocode[which(length(t$h_geocode) == 14)]<-paste0("0",t$h_geocode[which(length(t$h_geocode) == 14)])
t$wt<-substr(t$w_geocode,1,11)
t$ht<-substr(t$h_geocode,1,11)
View(t)
wtutract=aggregate(. ~ wt + ht,data=t[,c(11,14,15)],FUN=sum)
View(wtutract)
wtutract=aggregate(. ~ wt + ht,data=t[,c(3:12)],FUN=sum)
wtutract=aggregate(. ~ wt + ht,data=t[,c(3:12)],FUN=sum)
wtutract=aggregate(. ~ wt + ht,data=t[,3:12],FUN=sum)
wtutract=aggregate(. ~ wt + ht,data=t[,c(3,4,5,6,7,8,9,10)],FUN=sum)
t = read.csv("wa_od_main_JT00_2015.csv")
setwd(C:/Users/LXB19/Documents/GEOG458/Lab2)
setwd("C:/Users/LXB19/Documents/GEOG458/Lab2")
t = read.csv("wa_od_main_JT00_2015.csv")
t$w_geocode<-as.character(t$w_geocode)
t$h_geocode<-as.character(t$h_geocode)
t$w_geocode[which(length(t$w_geocode) == 14)]<-paste0("0",t$w_geocode[which(length(t$w_geocode) == 14)])
t$h_geocode[which(length(t$h_geocode) == 14)]<-paste0("0",t$h_geocode[which(length(t$h_geocode) == 14)])
t$wt<-substr(t$w_geocode,1,11)
t$ht<-substr(t$h_geocode,1,11)
wtutract=aggregate(. ~ wt + ht,data=t[,c(3,4,5,6,7,8,9,10)],FUN=sum)
,c(11,14,15)
wtutract=aggregate(. ~ wt + ht,data=t[,c(11,14,15)],FUN=sum)
wtutract=aggregate(. ~ wt + ht,data=t[,c(10,11,14,15)],FUN=sum)
wtutract=aggregate(. ~ wt + ht,data=t[,3:12],FUN=sum)
t = read.csv("wa_od_main_JT00_2015.csv")
t$w_geocode<-as.character(t$w_geocode)
t$h_geocode<-as.character(t$h_geocode)
t$w_geocode[which(length(t$w_geocode) == 14)]<-paste0("0",t$w_geocode[which(length(t$w_geocode) == 14)])
t$h_geocode[which(length(t$h_geocode) == 14)]<-paste0("0",t$h_geocode[which(length(t$h_geocode) == 14)])
t$wt<-substr(t$w_geocode,1,11)
t$ht<-substr(t$h_geocode,1,11)
wtutract=aggregate(. ~ wt + ht,data=t[,3:12],FUN=sum)
?aggregate
wtutract=aggregate(t,data=t[,3:12],FUN=sum)
wtutract=aggregate(t, by=t[,3:12],FUN=sum)
wtutract=aggregate(. ~ wt + ht,data=t[,c(3:12)],FUN=sum)
wtutract=aggregate(. ~ wt + ht,data=t[,c(11,14,15)],FUN=sum)
wtutract=aggregate(. ~ wt + ht,data=t[,c(3,4,5,6,7,8,9,10,11,12)],FUN=sum)
total = aggregate(t[3:12], by = t$wt, FUN = sum)
total = aggregate(t[3:12], by = wt, FUN = sum)
total = aggregate(t[3:12], by = "wt", FUN = sum)
total <- t %>%
replace(is.na(.), 0) %>%
mutate(Sum = rowSums(.[3:12]))
library(dplyr)
total <- t %>%
replace(is.na(.), 0) %>%
mutate(Sum = rowSums(.[3:12]))
View(total)
total <- t %>%
replace(is.na(.), 0) %>%
mutate(Sum = rowSums(.[3:12]))%>%
select(-matches("ss"))
total <- t %>%
replace(is.na(.), 0) %>%
mutate(WorkSum = rowSums(.[3:12]))%>%
select(-matches("S"))
View(total)
total <- t %>%
replace(is.na(.), 0) %>%
mutate(WorkSum = rowSums(.[3:12]))
View(total)
msa=read.csv("kcTract10.csv")
View(msa)
names(msa)[4] <- "wt"
names(msa)[4] <- "wt"
View(msa)
##Importing MSA tract list and cleaning up to make merge work
msa=read.csv("kcTract10.csv")
##Importing MSA tract list and cleaning up to make merge work
msa=read.csv("kcTract10.csv")
names(msa)[5] <- "wt"
View(wtutract)
View(total)
View(msa)
names(msa)[5] <- "wt"
wtutract2=merge(msa,wtutract,by="wt")
View(wtutract2)
View(wtutract)
View(total)
wtutract2=merge(msa,total,by="wt")
View(wtutract2)
View(wtutract2)
#check for duplicate values and create file, 's', that is only w_geocode and h_geocode fields
s<-unique(t[,1:2])
#check for duplicate values and create file, 's', that is only w_geocode and h_geocode fields
s<-unique(t[,1:2])
nrow(s)==nrow(t)
#add count variable (for count of "sending" blocks)
s$ct<-1
r<-aggregate(. ~ w_geocode, data=s[,-2], FUN=sum)
View(r)
r2<-aggregate(. ~ w_geocode, data=t[,c(1,3)], FUN=sum)
View(r2)
View(r)
r<-aggregate(. ~ w_geocode, data=s[,-2], FUN=sum)
r2<-aggregate(. ~ w_geocode, data=t[,c(1,3)], FUN=sum)
r<-merge(r,r2,by="w_geocode")
s2<-unique(t[,c(1,15)])
s2$trct<-1
s2<-aggregate(. ~ w_geocode, data=s2[,c(1,3)], FUN=sum)
r<-merge(r,s2,by="w_geocode")
View(r)
t = read.csv("wa_od_main_JT00_2015.csv")
View(t)
t$w_geocode<-as.character(t$w_geocode)
t$h_geocode<-as.character(t$h_geocode)
t$w_geocode[which(length(t$w_geocode) == 14)]<-paste0("0",t$w_geocode[which(length(t$w_geocode) == 14)])
t$h_geocode[which(length(t$h_geocode) == 14)]<-paste0("0",t$h_geocode[which(length(t$h_geocode) == 14)])
t$wt<-substr(t$w_geocode,1,11)
t$ht<-substr(t$h_geocode,1,11)
wtutract=aggregate(. ~ wt + ht,data=t[,3:12],FUN=sum)
wtutract <- t %>%
replace(is.na(.), 0) %>%
mutate(sum = rowSums(.[3:12]))
View(wtutract)
mantract=aggregate(. ~ wt + ht,data=t[,c(10,14,15)],FUN=sum)
View(mantract)
wtutract=aggregate(. ~ wt + ht,data=t[,c(4,5,6)],FUN=sum)
wtutract=aggregate(. ~ wt + ht,data=t[,c(11,14,15)],FUN=sum)
wtutract=aggregate(. ~ wt + ht,data=t[,c(11,14,15)],FUN=sum)
mantract=aggregate(. ~ wt + ht,data=t[,c(10,14,15)],FUN=su
m)
mantract=aggregate(. ~ wt + ht,data=t[,c(10,14,15)],FUN=sum)
wtutract=aggregate(. ~ wt + ht,data=t[,c(3,14,15)],FUN=sum)
View(wtutract)
##Importing MSA tract list and cleaning up to make merge work
msa=read.csv("kcTract10.csv")
names(msa)[5] <- "wt"
##Importing MSA tract list and cleaning up to make merge work
msa=read.csv("kcTract10.csv")
names(msa)[1] <- paste("wt")
View(msa)
##Merging to cut dataset down to just Seattle MSA
wtutract2=merge(msa,wtutract,by="wt")
View(wtutract2)
##Merging to cut dataset down to just Seattle MSA
wtutract2=merge(msa,wtutract,by="wt")
##Importing MSA tract list and cleaning up to make merge work
msa=read.csv("WA_census_2015.csv")
View(msa)
names(msa)[6] <- paste("wt")
##Merging to cut dataset down to just Seattle MSA
wtutract2=merge(msa,wtutract,by="wt")
View(wtutract2)
#check for duplicate values and create file, 's', that is only w_geocode and h_geocode fields
s<-unique(t[,1:2])
#check for duplicate values and create file, 's', that is only w_geocode and h_geocode fields
s<-unique(t[,1:2])
nrow(s)==nrow(t)
#add count variable (for count of "sending" blocks)
s$ct<-1
#using 's', sum count variable to get number of blocks "sending" jobs to work block
r<-aggregate(. ~ w_geocode, data=s[,-2], FUN=sum)
View(r)
#using original file 't', sum job variable S000 to get count of "jobs" to work block
r2<-aggregate(. ~ w_geocode, data=t[,c(1,3)], FUN=sum)
View(r2)
#merge two sums together by work block FIPS
r<-merge(r,r2,by="w_geocode")
#create file 's2' that has w_geocode and ht
s2<-unique(t[,c(1,15)])
#add count variable (for count of "sending" tracts)
s2$trct<-1
View(s2)
#using 's2', sum count variable to get number of tracts "sending" jobs to work block
s2<-aggregate(. ~ w_geocode, data=s2[,c(1,3)], FUN=sum)
r<-merge(r,s2,by="w_geocode")
View(r)
library(reshape2)
##Issues
wtuodtract=acast(wtutract2, wt ~ ht,value.var="S000")
wtuodtract[is.na(wtuodtract)]=0
write.table(wtuodtract,"wtuodtract.csv")
View(wtuodtract)
wtuodtract <- as.data.frame(wtuodtract)
View(wtuodtract)
View(r)
View(wtutract2)
write.table(wtutract2, "OD_WA_CensusTract.csv")
##Importing MSA tract list and cleaning up to make merge work. MSA is the WA's all census tracts here
WA <- read.csv("WA_census_2015.csv")
##change GEOID to wt for the joining/merging process
names(WA)[6] <- paste("wt")
##Merging to cut dataset down to just WA census tract
wtutract2=merge(WA,wtutract,by="wt")
write.table(wtutract2, "OD_WA_CensusTract.csv")
OD_worktype_tract = rbind(type_S000$S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03)
type_S000 = aggregate(. ~ wt + ht,data=t[,c(3,14,15)],FUN=sum)
type_SA01 = aggregate(. ~ wt + ht,data=t[,c(4,14,15)],FUN=sum)
type_SA02 = aggregate(. ~ wt + ht,data=t[,c(5,14,15)],FUN=sum)
type_SA03= aggregate(. ~ wt + ht,data=t[,c(6,14,15)],FUN=sum)
type_SE01 = aggregate(. ~ wt + ht,data=t[,c(7,14,15)],FUN=sum)
type_SE02 = aggregate(. ~ wt + ht,data=t[,c(8,14,15)],FUN=sum)
type_SE03 = aggregate(. ~ wt + ht,data=t[,c(9,14,15)],FUN=sum)
type_SI01 = aggregate(. ~ wt + ht,data=t[,c(10,14,15)],FUN=sum)
type_SI02 = aggregate(. ~ wt + ht,data=t[,c(11,14,15)],FUN=sum)
type_SI03 = aggregate(. ~ wt + ht,data=t[,c(12,14,15)],FUN=sum)
write.csv(OD_worktype_tract, file = "OD_worktype.csv")
OD_worktype_tract = rbind(type_S000$S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03)
write.csv(OD_worktype_tract, file = "OD_worktype.csv")
head(OD_worktype_tract)
OD_worktype_tract = merge(type_S000$S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03)
library(dplyr)
?join_all
library(plyr)
OD_worktype_tract = join_all(list(type_S000$S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03), by = 'wt', type = 'left')
typeof(type_S000)
OD_worktype_tract = join_all(list(type_S000$S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03), by = 'wt', type = 'left')
OD_worktype_tract = rbind.data.frame(list(type_S000$S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03)
)
View(OD_worktype_tract)
OD_worktype_tract = rbind.data.frame(type_S000$S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03))
OD_worktype_tract = rbind.data.frame(type_S000$S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03)
View(OD_worktype_tract)
head(OD_worktype_tract)
View(OD_worktype_tract)
OD_worktype_tract = rbind.data.frame(type_S000, type_SA01, type_SA02, type_SA03, type_SE01, type_SE02, type_SE03, type_SI01, type_SI02, type_SI03)
OD_worktype_tract = rbind.data.frame(type_S000, type_SA01, type_SA02, type_SA03, type_SE01, type_SE02, type_SE03, type_SI01, type_SI02, type_SI03)
OD_worktype_tract = rbind.data.frame(type_S000, type_SA01, type_SA02, type_SA03, type_SE01, type_SE02, type_SE03, type_SI01, type_SI02, type_SI03)
OD_worktype_tract = rbind(type_S000, type_SA01, type_SA02, type_SA03, type_SE01, type_SE02, type_SE03, type_SI01, type_SI02, type_SI03)
OD_worktype_tract = merge(type_S000, type_SA01, type_SA02, type_SA03, type_SE01, type_SE02, type_SE03, type_SI01, type_SI02, type_SI03)
OD_worktype_tract = merge.data.frame(type_S000, type_SA01, type_SA02, type_SA03, type_SE01, type_SE02, type_SE03, type_SI01, type_SI02, type_SI03)
OD_worktype_tract = merge(c(type_S000$S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03), by = 'wt')
OD_worktype_tract = data.frame(type_S000$S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03)
View(OD_worktype_tract)
OD_worktype_tract = data.frame(type_S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03)
OD_worktype_tract <- data.frame(type_S000, type_SA01$SA01, type_SA02$SA02, type_SA03$SA03, type_SE01$SE01, type_SE02$SE02, type_SE03$SE03, type_SI01$SI01, type_SI02$SI02, type_SI03$SI03)
View(OD_worktype_tract)
df <- data.frame(type_S000, type_SA01, type_SA02, type_SA03)
View(df)
df <- data.frame(type_S000, type_SA01, type_SA02, type_SA03, type_SE01, type_SE02, type_SE03, type_SI01, type_SI02, type_SI03)
View(df)
OD_worktype_tract <- data.frame(type_S000, type_SA01, type_SA02, type_SA03, type_SE01, type_SE02, type_SE03, type_SI01, type_SI02, type_SI03)
pre_OD_worktype_tract <- data.frame(type_S000, type_SA01, type_SA02, type_SA03, type_SE01, type_SE02, type_SE03, type_SI01, type_SI02, type_SI03)
OD_worktype_tract <- pre_OD_worktype_tract %>%
)
OD_worktype_tract <- pre_OD_worktype_tract %>%
select(-matches(c("wt.", "ht.")))
OD_worktype_tract <- pre_OD_worktype_tract %>%
select(-matches("wt."))
View(OD_worktype_tract)
OD_worktype_tract <- pre_OD_worktype_tract %>%
select(-matches("wt.", "ht."))
View(OD_worktype_tract)
View(OD_worktype_tract)
pre_OD_worktype_tract <- data.frame(type_S000, type_SA01, type_SA02, type_SA03, type_SE01, type_SE02, type_SE03, type_SI01, type_SI02, type_SI03)
OD_worktype_tract <- pre_OD_worktype_tract %>%
select(-matches("wt.", "ht."))
View(OD_worktype_tract)
OD_worktype_tract <- pre_OD_worktype_tract %>%
select(-matches("."))
pre_OD_worktype_tract <- data.frame(type_S000, type_SA01, type_SA02, type_SA03, type_SE01, type_SE02, type_SE03, type_SI01, type_SI02, type_SI03)
OD_worktype_tract <- pre_OD_worktype_tract %>%
select(-matches("ht."))
View(OD_worktype_tract)
OD_worktype_tract <- pre_OD_worktype_tract %>%
select(-contains("ht.", "wt."))
OD_worktype_tract <- pre_OD_worktype_tract %>%
select(-contains("ht."))
View(OD_worktype_tract)
OD_worktype_tract <- pre_OD_worktype_tract %>%
select(-contains("t."))
View(OD_worktype_tract)
##Importing MSA tract list and cleaning up to make merge work. MSA is the WA's all census tracts here
kc <- read.csv("kcTract10.csv")
##change GEOID to wt for the joining/merging process
names(kc)[5] <- paste("wt")
##Merging to cut dataset down to just WA census tract
wtutract2=merge(kc,OD_worktype_tract,by="wt")
View(wtutract2)
##change GEOID to wt for the joining/merging process
names(kc)[5] <- ("wt")
##Merging to cut dataset down to just WA census tract
kc_OD=merge(kc,OD_worktype_tract,by="wt")
write.csv(kc_OD, "kc_OD,csv")
write.csv(kc_OD, "kc_OD.csv")
kc_OD$wt<- as.character(kc_OD$wt)
write.csv(kc_OD, "kc_OD.csv")
kc_OD$wt[which(length(kc_OD$wt) == 14)]<-paste0("0",kc_OD$wt[which(length(kc_OD$wt) == 14)])
View(kc_OD)
write.csv(kc_OD, "kc_OD.csv")
write.csv(kc_OD, "OD2015_Alljobs.csv")
